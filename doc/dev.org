* About
Crapp's intended goal is to ease the software devolpment process by producing a
directory tree formatted with tools that hopefully will standardize and drive a
simple development process.

Such an endeavor is extremely difficult. Why?
Because the development process itself is not standard. Each application and
organization producing an application have different development needs.

One person embarking on a personal project with the stated goal of installing
the program to his system for personal use would be content with the following
development process:

1. Write code
2. compile code
3. execute
4. repeat
5. when done install program at ~/bin
6. Add ~/bin to $PATH if not already there

One must keep in mind that the above devop is very high level and does
not address questions such as:

1. Which text editor is being used
2. How does one go debugging the program?
3. What about versioning?
4. What about dependencies?

TODO -> Give an example of a more complicated development process.

As such navigating across this overly-saturated environment one must discern
patterns out of the myriad of tools and methodologies..

* Command line arguments
** required arguments
Crapp requires a few input parameters in order to successfully run. If it is not
provided with those inputs then crapp throws an input validation error.

Some of the required inputs may be autogenerated if crapp is invoked with the
*--autogen* flag.

*--target* The Base template

*--preset* The Derived template

*--prefix* The installation root directory
   If no path is provided crapp will assume the 1st positional argument is the
   path. If the path or any of its components are missing then crapp throws an error.
   /autogenerated through the --autogen flag/

*--name* The application name
   /autogenerated through the --autogen flag/

*--version* The application version
   Will be validated for conformity against the semantic versioning scheme.
   /autogenerated through the --autogen flag/

*--summary* A short sentence describing the application
   /autogenerated through the --autogen flag/

** options
* Standard Application Environment Variables
package_name -> autogenerated using gname.sh
package_summary -> autogenerated using lorem
package_description -> autogenerated using lorem

package_bugreport
package_version
package_fullname -> derived
package_distname -> derived
* Glossary
** crapp_tag
rename to crapp_target
** crapp_type
rename to crapp_preset
** crapp_path
rename to crapp_prefix
crapp_path

** app_name
rename to target_name
** app_path
rename to target_prefix
** app_path
rename to target_path
target_summary
target_description
target_version
