#!/usr/bin/env bash

# Parameters
# --------------------------------------------------
## Configure preset
CONF_PRESET=
INSTALL_PRESET=

## Package source directory
co_srcdir=.

## Package installation directories
## --------------------------------------------------
### The directories represented here roughly correspond to those listed in the
### *GNU Coding Standards*. I have been carefull to only exempt those which the
### community has decided to deprecate by virtue of me never seeing them used.
###
### The *FHS*, *GNU* Coding Standards and the *XDG* base directory specification
### are great sources of information for anyone inquiring as to the proper location
### of data.
###
### *GNU* Coding Standards:
###     https://www.gnu.org/prep/standards/
### *FHS*:
###     https://refspecs.linuxfoundation.org/FHS_3.0/fhs/index.html
### *XDG* Base Directory Specification:
###     https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html
### *Debian*
###     https://www.debian.org/doc/debian-policy/ch-opersys.html
declare -g co_prefix \
    co_exec_prefix \
    co_libexecdir \
    co_localstatedir \
    co_datarootdir \
    co_sysconfdir \
    co_tmpdir \
    co_bindir \
    co_sbindir \
    co_libexecdir \
    co_libdir \
    co_localedir \
    co_includedir \
    co_docdir \
    co_infodir \
    co_lispdir \
    co_mandir \
    co_desktopdir

# as in /usr/share/applications

## Build configuration targets
## --------------------------------------------------
### It is very common to want to configure a project to be build and run under a
### combination of diverse setups. Variability of a program's setup other than
### offered features or dependencies can usually trace their origin in the
### following sources:
### 1. Environment
### 2. Compiler options
### 3. Compiler
### 4. CPU architectures
### 5. Operating systems
### * Not all of this will be applicable for every project
declare -g co_target_env \
    co_target_compiler \
    co_target_compiler_opts \
    co_target_cpu \
    co_target_os \
    co_target

# Constants
# --------------------------------------------------
declare -g srcdir
srcdir="$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" 2>/dev/null && pwd)"
readonly srcdir

main() {
    if [ -n "${srcdir-}" ]; then
        cd "${srcdir}"
    else
        fatal "Could not cd into '${srcdir}'"
    fi
    # clear previous configure logs
    cat /dev/null >./config.log
    # clear previous configured environment
    cat /dev/null >./.env
    parse_args "$@"
    set_installdirs
    set_build_targets
    set_env
}

set_system() {
    build_arch=
    build_os
    host_arch=
    host_os=
    target_arch=
    target_os=

    # The os-architecture that is performing the *build* is the same
    # for which the compiled binary has been designed to *run* on which in turn
    # produces binaries (in case of the binary being a compiler) for the same os-arch
    # the binary was build on and for.
    #
    # As an example:
    # Let our source code define a compiler named MY_GCC
    # Let *build-arch* be the instruction-set of the compiler which we shall use to build MY_GCC
    # Let *host-arch* be the instruction-set MY_GCC was compiled to use or run on.
    # Let *target-os* be the instruction set that the binaries produced by MY_CCC shall run on.
    # 
    # Considering the defined terms:
    # A native compilation occurs when -> *target-arch* = *host-arch* = *build-arch*
}

set_env() {
    cat <<EOF >.env
prefix=${co_prefix}
exec_prefix=${co_exec_prefix}
localstatedir=${co_localstatedir}
runstatedir=${co_runstatedir}
datarootdir=${co_datarootdir}
sysconfdir=${co_sysconfdir}
tmpdir=${co_tmpdir}
bindir=${co_bindir}
sbindir=${co_sbindir}
libexecdir=${co_libexecdir}
libdir=${co_libdir}
includedir=${co_includedir}
lispdir=${co_lispdir}
localedir=${co_localedir}
docdir=${co_docdir}
infodir=${co_infodir}
mandir=${co_mandir}
target_env=${co_target_env}
target_compiler=${co_target_compiler}
target_compiler_opts=${co_target_compiler_opts}
target_cpu=${co_target_cpu}
target_os=${co_target_os}
target=${co_target}
EOF
}

set_build_targets() {
    co_target_env="${co_target_env:-dev}"
    co_target_compiler="${co_target_compiler:-bash.5.1.16}"
    co_target_compiler_opts="${co_target_compiler_opts:-}"
    co_target_cpu="${co_target_cpu:-$(uname -m)}"
    co_target_os="${co_target_os:-$(uname -o)}"
    co_target="${co_target_env}.${co_target_cpu}.${co_target_os}"
    co_target=$(echo "${co_target}" | tr A-Z a-z | tr / _)
    cat <<EOF | tee -a config.log
configure: set target environment to... ${co_target_env}
configure: set target compiler to... ${co_target_compiler}
configure: set target compiler options to... ${co_target_compiler_opts}
configure: set target cpu architecture to... ${co_target_cpu}
configure: set target os to... ${co_target_os}
configure: set target to... ${co_target}
EOF
}

set_userdirs() {
    # user specific application data should be placed here
    return 0
}

set_installdirs() {
    case "${INSTALL_PRESET:-}" in
        vendor)
        # Prefixes
        co_prefix=/usr
        co_execprefix=${co_prefix}
        co_datarootdir=${co_prefix}/share

        co_localstateroot=/var
        co_runstateroot=/run

        co_localstatedir=/var
        co_runstatedir=/run

        co_sys_statedir=/var
        co_sys_rundir=/run
        co_sys_confdir=/etc
        co_sys_datarootdir=/usr/share
        co_sys_datadir=/usr/share/${package} || /usr/lib/${package}
        co_sys_includedir=/usr/include/
        co_sys_libdir=

        co_usr_statedir=
        co_usr_rundir=
        co_usr_confdir=
        co_usr_datarootdir=
        co_usr_datadir=


        # Executables
        co_bindir=/usr/bin
        co_sbindir=/usr/sbin

        # Configuration
        co_sysconfdir=/etc
        co_user_confdir=$HOME/.config/${co_package}

        # Documentation
        co_mandir=${co_datarootdir}/man
        co_infodir=${co_datarootdir}/info
        co_docdir=${co_datarootdir}/doc/${co_package}
        co_htmldir=${co_docdir}/html
        co_pdfdir=${co_docdir}/pdf

        # Static data
        co_datadir=${co_datarootdir}/${co_package}
        co_libdir=${prefix}/lib/${co_package}
        co_includedir=${prefix}/include/${co_package}

        # Variable persistent data
        co_local_statedir=${co_localstateroot}/lib/${co_package}
        co_local_spooldir=${co_localstateroot}/spool/${co_package}
        co_local_logdir=${co_localstateroot}/log/${co_package}
        co_local_cachedir=${co_localstateroot}/cache/${co_package}
        co_local_tmpdir=${TMPDIR:-${co_localstateroot/tmp}}

        # Variable volatile data
        co_run_statedir=${co_runstateroot}/${co_package}
        co_run_logdir=${co_runstateroot}/log/${co_package}
        co_run_lockdir=${co_runstateroot}/lock
        co_run_tmpdir=/tmp

        ;;
        admin)
        co_bindir=/usr/local/bin
        # Prefixes
        co_prefix=
        co_execprefix=

        # Executables
        co_bindir=
        co_sbindir=

        # Documentation
        co_mandir=
        co_infodir=
        co_docdir=
        co_htmldir=
        co_pdfdir=

        # Static data
        co_datadir=
        co_libdir=
        co_includedir=

        # Variable persistent data
        co_localstatedir=
        co_spooldir=
        co_logdir=
        co_cachedir=

        # Variable volatile data
        co_runstatedir=
        co_tmpdir=
        ;;
        optional)
        co_bindir=/opt/${package}/bin
        ;;
        user)
        co_bindir=${HOME}/.local/bin
        ;;
        home
        co_bindir=${HOME}/bin
        ;;
        *)
        co_bindir=${prefix}/bin
        ;;
    esac

    if Vendor then
        BINDIR=/usr
    if Optional  then
        BINDIR=/opt/${package}/bin
    if Vendor or Admin then
        BINDIR=${exec_prefix}/bin

    # Configuration
    Vendor: /etc/$package
    Admin: /etc/local/$package
    Optional: /etc/opt/$package

    if prefix = '/usr' then
        SYSCONFDIR=/etc
    if prefix = '/usr/local' then
        SYSCONFDIR=/etc/local/${package}
        or
        SYSCONFDIR=/usr/local/etc/${package}
        and /usr/local/etc is a symlink to /etc/local
    if prefix = '/opt' then
        SYSCONFDIR=/etc/opt/${package}
        or
        SYSCONFDIR=/opt/${package}/etc
        and /opt/${package}/etc is a symlink to /etc/opt/${package}
    if none of the above then
        SYSCONFDIR=${prefix}/etc

    # Temporary files
    Vendor: /tmp
    Admin: /tmp
    Optional: /tmp

    TMPDIR=/tmp

    # Spool
    Vendor: /var/spool/$package
    Admin: /var/local/spool/$package
    Optional: /var/opt/$package/spool

    if prefix = '/usr' then
        spooldir=${localstatedir}/spool
    if prefix = '/usr/local'

    # Cache
    Vendor: /var/cache/$package
    Admin: /var/local/cache/$package
    Optional: /var/opt/$package/cache

    # Variable data that does not fit in any other category
    Vendor: /var/lib/$package
    Admin: /var/local/lib/$package
    Optional: /var/opt/$package/lib

    # Logs
    Vendor: /var/log
    Admin: /var/local/log/$package.log || /var/local/log/$package/
    Optional: /var/opt/$package/log
    Dynamic -> localstatedir=${prefix}/

    # Libraries (object files, arch-dependent)
    Vendor: /usr/lib/$package
    Admin: /usr/local/lib/$package
    Optional: /opt/$package/lib
    Dynamic -> libdir=${execprefix}/lib

    # Source code
    Vendor: /usr/src/$package
    Admin: /usr/local/src/$package
    Optional: /opt/$package/src
    Dynamic -> Not applicable

    # Headers (#include)
    Vendor: /usr/include
    Admin: /usr/include
    Optional: /opt/$package/include
    Dynamic -> Not Applicable

    # Read only input data
    Vendor: /usr/share/$package
    Admin: /usr/local/share/$package
    Optional: /opt/$package/share/
    Dynamic -> datadir=${prefix}/share/$package

    # Documentation and information other than Info and Man
    Vendor: /usr/share/doc/$package
    Admin: /usr/local/share/doc/$package
    Optional: /opt/$package/share/doc
    Dynamic -> docdir=${datarootdir}/doc/$package

    # Info manuals:
    Vendor: /usr/share/info/$package.info.gz
    Admin: /usr/local/share/info/$package.info.gz
    Optional: /opt/$package/share/info/$package.info.gz
    Dynamic -> infodir=${datarootdir}/info/${package}.info.gz

    # Man manuals:
    Vendor: /usr/share/man/man${section}/${package}.${section}.gz
    Admin: /usr/local/share/man/man${section}/${package}.${section}.gz
    Optional: /opt/$package/share/man/man${section}/${package}.${section}.gz
    Dynamic -> man${section}dir=${mandir}/man${section}/${package}.${section}.gz


    # Data files:
    # 1. Writable -> never shared
    # 2. Writable, architecture dependent -> shared under conditions
    # 3. Writable, architecture independent -> shared by all
    # 4. Not writable -> never shared
    # 5. Not writable, architecture dependent -> shared under conditions
    # 6. Not writable, architecture independent -> shared by all

    co_prefix="$(normalize_path "${co_prefix:-/usr/local}")"
    co_exec_prefix="$(normalize_path "${co_exec_prefix:-${co_prefix}}")"
    co_localstatedir="$(normalize_path "${co_localstatedir:-${co_prefix}/var}")"
    co_runstatedir="$(normalize_path "${co_runstatedir:-${co_prefix}/run}")"
    co_datarootdir="$(normalize_path "${co_datarootdir:-${co_prefix}/share}")"
    co_sysconfdir="$(normalize_path "${co_sysconfdir:-${co_prefix}/etc}")"
    co_tmpdir="$(normalize_path "${co_tmpdir:-${co_prefix}/tmp}")"
    co_bindir="$(normalize_path "${co_bindir:-${co_exec_prefix}/bin}")"
    co_sbindir="$(normalize_path "${co_sbindir:-${co_exec_prefix}/sbin}")"
    co_libexecdir="$(normalize_path "${co_libexecdir:-${co_exec_prefix}/libexec}")"
    co_libdir="$(normalize_path "${co_libdir:-${co_exec_prefix}/lib}")"
    co_includedir="$(normalize_path "${co_includedir:-${co_prefix}/include}")"
    co_lispdir="$(normalize_path "${co_lispdir:-${co_datarootdir}/emacs/site-lisp}")"
    co_localedir="$(normalize_path "${co_localedir:-${co_datarootdir}/locale}")"
    co_docdir="$(normalize_path "${co_docdir:-${co_datarootdir}/doc}")"
    co_infodir="$(normalize_path "${co_infodir:-${co_datarootdir}/info}")"
    co_mandir="$(normalize_path "${co_mandir:-${co_datarootdir}/man}")"

    cat <<EOF | tee -a config.log
configure: set prefix to... ${co_prefix}
configure: set exec_prefix to... ${co_exec_prefix}
configure: set localstatedir to... ${co_localstatedir}
configure: set runstatedir to... ${co_runstatedir}
configure: set datarootdir to... ${co_datarootdir}
configure: set sysconfdir to... ${co_sysconfdir}
configure: set tmpdir to... ${co_tmpdir}
configure: set bindir to... ${co_bindir}
configure: set sbindir to... ${co_sbindir}
configure: set libexecdir to... ${co_libexecdir}
configure: set libdir to... ${co_libdir}
configure: set includedir to... ${co_includedir}
configure: set lispdir to... ${co_lispdir}
configure: set localedir to... ${co_localedir}
configure: set docdir to... ${co_docdir}
configure: set infodir to... ${co_infodir}
configure: set mandir to... ${co_mandir}
EOF
}

# @param {string} $1 - a path
normalize_path() {
    local path
    path=$1
    path="${path//\/\//\/}"
    path="${path%\/}"
    echo "$path"
}

# @param {Array<string} $0..$n - command line arguments
parse_args() {
    declare -g shifter
    shifter=$(mktemp)
    declare -ga ARGS
    ARGS=()

    while (($# > 0)); do
        case "$1" in
        --install-type=*)
            INSTALL_PRESET="$(parse_param "$@")"
            ;;
        --prefix=*)
            co_prefix="$(parse_param "$@")"
            ;;
        --execprefix=*)
            co_exec_prefix="$(parse_param "$@")"
            ;;
        --localstatedir=*)
            co_localstatedir="$(parse_param "$@")"
            ;;
        --runstatedir=*)
            co_runstatedir="$(parse_param "$@")"
            ;;
        --datarootdir=*)
            co_datarootdir="$(parse_param "$@")"
            ;;
        --sysconfdir=*)
            co_sysconfdir="$(parse_param "$@")"
            ;;
        --tmpdir=*)
            co_tmpdir="$(parse_param "$@")"
            ;;
        --bindir=*)
            co_bindir="$(parse_param "$@")"
            ;;
        --sbindir=*)
            co_sbindir="$(parse_param "$@")"
            ;;
        --libexecdir=*)
            co_libexecdir="$(parse_param "$@")"
            ;;
        --libdir=*)
            co_libdir="$(parse_param "$@")"
            ;;
        --localedir=*)
            co_localedir="$(parse_param "$@")"
            ;;
        --includedir=*)
            co_includedir="$(parse_param "$@")"
            ;;
        --docdir=*)
            co_docdir="$(parse_param "$@")"
            ;;
        --infodir=*)
            co_infodir="$(parse_param "$@")"
            ;;
        --lispdir=*)
            co_lispdir="$(parse_param "$@")"
            ;;
        --mandir=*)
            co_mandir="$(parse_param "$@")"
            ;;
        --help | -help | --h | -h)
            usage
            exit 1
            ;;
        -[a-zA-Z][a-zA-Z]*)
            local i="$1"
            shift
            for i in $(echo "$i" | grep -o '[a-zA-Z]'); do
                set -- "-$i" "$@"
            done
            continue
            ;;
        --)
            shift
            ARGS+=("$@")
            break
            ;;
        -[a-zA-Z]* | --[a-zA-Z]*)
            error "Unrecognized argument $1"
            exit 1
            ;;
        *)
            ARGS+=$("$1")
            ;;
        esac
        shift $(($(cat ${shifter}) + 1))
        echo 0 >${shifter}
    done

    rm ${shifter} && unset shifter
    return 0
}

# @param {Array<string>} $1..$n - parse arguments to command line parameter options
parse_param() {
    local param arg

    if [[ "$1" =~ .*=.* ]]; then
        param="${1%%=*}"
        arg="${1#*=}"
    elif [[ "${2-}" =~ ^[^-].+ ]]; then
        param="$1"
        arg="$2"
        echo 1 >$shifter
    fi

    if [ ! "${arg-}" ] && [ ! "${OPTIONAL-}" ]; then
        error "${param-$1} requires an argument"
        exit 1
    fi
    echo "${arg-}"
    return 0
}

# @params { string } $n - options
# @param {string} $n - error message
staterr() {
    local -a ARGS
    local QUIT USAGE MESSAGE
    ARGS=()
    exec 1>&2

    while [ $# -gt 0 ]; do
        case "$1" in
        -s) # silent
            exec 2>/dev/null
            shift
            ;;
        -q) # quiet
            QUIT=0
            readonly QUIT
            shift
            ;;
        -u) # usage
            USAGE=0
            readonly USAGE
            shift
            ;;
        *)
            ARGS+=("$1")
            shift
            ;;
        esac
    done

    MESSAGE="${ARGS[@]}"
    [ -n "${MESSAGE-}" ] && printf %s\\n "${MESSAGE}"
    [ -n "${USAGE-}" ] && printf %s\\n 'Run with --help to see usage.'
    [ -n "${QUIT-}" ] && exit 1
    return 0
}

# @param {string} $1 - error message
fatal() {
    staterr -q "$@"
}

# @param {string} $1 - error message
error() {
    staterr -q "$@"
}

# @param {string} $1 - error message
warn() {
    staterr "$@"
}

# Program start
# --------------------------------------------------
main "$@"
