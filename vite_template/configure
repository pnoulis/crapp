#!/usr/bin/env bash

# export all variables to spawned processes
set -o allexport

# Current location
EXECDIR=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" 2>/dev/null && pwd)
# Dependencies
GEN_RANDOM_NAME="${EXECDIR}/gname"

main() {
    parse_args "$@"
    set -- "$args"
    get_pkg_name "$@"
    [[ $# > 0 ]] && shift
    get_pkg_srcdir "$@"
    [[ $# > 0 ]] && shift
    gen_pkg_meta
    if [[ -n "${DEBUG:-}" ]]; then
        # mkdir ./build 2>/dev/null
        # rm -rdf ./build/*
        cd ./build
        gen_eslint
    else
        mkdir "${PKG_SRCDIR}"
        if [[ $? > 0 ]]; then
            die "Failed to create dir ${PKG_SRCDIR}"
        fi
        cd "${PKG_SRCDIR}"
        init_vite
    fi

    merge_package_json
    gen_editorconfig
    gen_prettier
    gen_browserslist
    gen_package
    gen_readme
    gen_makefile
    gen_eslint
    mkdir -p docs tests src scripts assets
    rm -rdf src/*
    gen_gitignore
    gen_gitattributes
    touch .env \
          .env.local \
          .env.development \
          .env.production \
          .env.development.local \
          .env.production.local \
          docs/dev.org \
          tests/.gitkeep \
          src/.gitkeep \
          assets/.gitkeep \
          scripts/.gitkeep
    make fmt
    make lint
    if [[ $? > 0 ]]; then
        die "FIx linter problems then commit"
    fi
    init_git
}


init_git() {
    git init
    git add .
    git commit -m 'Initial commit'
}
gen_gitignore() {
    cat <<EOF > .gitignore
/build*
/dist*
/var*
/coverage*
/tmp*
/run*

# XDG user directories
.config
.local
.cache

# logs
*.log
*.logs

# environment variables
.env.*.local
.env.local

# node
node_modules
package-lock.json

# emacs
# cached changes
\#*\#
# undo cache
*~

# vim
:w

# vscode
.vscode

# intellij
.idea
EOF
}

gen_gitattributes() {
 cat <<EOF > .gitattributes

# automatic conversion of crlf to lf for text files
*                 text=auto

# unix scripts
*.sh              text eol=lf
*.bash            text eol=lf
*.fish            text eol=lf
*.zsh             text eol=lf

# windows scripts
*.p1              text eol=crlf
*.ps1             text eol=crlf
*.bat             text eol=crlf
*.cmd             text eol=crlf

# Graphics
*.ai              binary
*.bmp             binary
*.eps             binary
*.gif             binary
*.gifv            binary
*.ico             binary
*.jng             binary
*.jp2             binary
*.jpg             binary
*.jpeg            binary
*.jpx             binary
*.jxr             binary
*.pdf             binary
*.png             binary
*.psb             binary
*.psd             binary
# SVG treated as an asset (binary) by default.
*.svg             text
# If you want to treat it as binary,
# use the following line instead.
# *.svg           binary
*.svgz            binary
*.tif             binary
*.tiff            binary
*.wbmp            binary
*.webp            binary

# Video
*.3gpp            binary
*.3gp             binary
*.as              binary
*.asf             binary
*.asx             binary
*.avi             binary
*.fla             binary
*.flv             binary
*.m4v             binary
*.mng             binary
*.mov             binary
*.mp4             binary
*.mpeg            binary
*.mpg             binary
*.ogv             binary
*.swc             binary
*.swf             binary
*.webm            binary

# Audio
*.kar             binary
*.m4a             binary
*.mid             binary
*.midi            binary
*.mp3             binary
*.ogg             binary
*.ra              binary

# Fonts
*.ttf             binary
*.eot             binary
*.otf             binary
*.woff            binary
*.woff2           binary

# Archives
*.7z              binary
*.gz              binary
*.jar             binary
*.rar             binary
*.tar             binary
*.zip             binary
EOF
}

gen_makefile() {
    TAB="$(printf '\t')"

        cat <<EOF > Makefile
#!/usr/bin/make

# Make and Shell behavior
SHELL = /usr/bin/bash
.DELETE_ON_ERROR:
.DEFAULT_GOAL = run

# Programs
INSTALL = /usr/bin/install
MKDIRP = /usr/bin/mkdir -p
CP = /usr/bin/cp
RM = /usr/bin/rm
CHMOD = /usr/bin/chmod
BUILD_SYS = npm exec vite
LINTER = eslint
FORMATER = prettier

.PHONY: all
all: run

.PHONY: run
run:
${TAB}\$(BUILD_SYS) serve

.PHONY: build
build:
${TAB}\$(BUILD_SYS) build

.PHONY: lint
lint:
${TAB}\$(LINTER) --ext js,jsx --fix .

.PHONY: lint-check
lint-check:
${TAB}\$(LINTER) --ext js,jsx .

.PHONY: lint-dry
lint-dry:
${TAB}\$(LINTER) --ext js,jsx --fix-dry-run .

.PHONY: fmt
fmt:
${TAB}\$(FORMATER) --write .

.PHONY: fmt-check
fmt-check:
${TAB}\$(FORMATER) --check .

.PHONY: fmt-dry
fmt-dry:
${TAB}\$(FORMATER) .
EOF
}

gen_readme() {
        cat <<EOF > README.md
<a name='readme-top'></a>
![GitHub last commit](https://img.shields.io/github/last-commit/pnoulis/af_admin?style=flat-quare)
[![JavaScript Style Guide](https://img.shields.io/badge/code_style-prettier-brightgreen.svg)](https://prettier.io)

<br />
<div align="center">
<h3 align="center">${PKG_NAME}</h3>
<p align="center">
${PKG_DESCRIPTION}
<br/>
</p>
</div>

<details>
 <summary>Table of Contents</summary>
 <ol>
   <li>
      <a href="#about-the-project">About The Project</a>
      <ul>
        <li><a href="#built-with">Built With</a></li>
      </ul>
   </li>
    <li>
      <a href="#getting-started">Getting Started</a>
      <ul>
        <li><a href="#prerequisites">Prerequisites</a></li>
        <li><a href="#installation">Installation</a></li>
      </ul>
    </li>
    <li><a href="#usage">Usage</a></li>
    <li><a href="#roadmap">Roadmap</a></li>
    <li><a href="#contributing">Contributing</a></li>
    <li><a href="#license">License</a></li>
    <li><a href="#contact">Contact</a></li>
    <li><a href="#acknowledgments">Acknowledgments</a></li>
</ol>
</details>

## About The Project

### Built with

* ![javascript](https://img.shields.io/badge/JavaScript-323330?style=for-the-badge&logo=javascript&logoColor=F7DF1E)

* ![react](https://img.shields.io/badge/React-20232A?style=for-the-badge&logo=react&logoColor=61DAFB)

* ![vite](https://img.shields.io/badge/Vite-B73BFE?style=for-the-badge&logo=vite&logoColor=FFD62E)


## Getting Started

### Prerequisites
<p align='right'>(<a href="#readme-top">back to top</a>)</p>

### Installation
<p align='right'>(<a href="#readme-top">back to top</a>)</p>

## Usage
<p align='right'>(<a href="#readme-top">back to top</a>)</p>

## Contributing
<p align='right'>(<a href="#readme-top">back to top</a>)</p>

## License
<p align='right'>(<a href="#readme-top">back to top</a>)</p>

## Contact
<p align='right'>(<a href="#readme-top">back to top</a>)</p>
EOF
}

gen_package() {
    cat <<EOF > PACKAGE
PKG_NAME=$PKG_NAME
PKG_SUMMARY=$PKG_SUMMARY
PKG_DESCRIPTION=$PKG_DESCRIPTION
PKG_KEYWORDS=$PKG_KEYWORDS
PKG_VERSION=$PKG_VERSION
PKG_DISTNAME=$PKG_DISTNAME
PKG_REPO=$PKG_REPO
PKG_HOMEPAGE=$PKG_HOMEPAGE
PKG_BUGREPORT=$PKG_BUGREPORT
PKG_DOCS=$PKG_DOCS
EOF
}

gen_browserslist() {
    cat <<EOF > browserslist
last 2 Firefox versions
last 2 Chrome versions
last 2 ChromeAndroid versions
EOF
}

gen_prettier() {
    cat <<EOF > .prettierignore
/build*
/dist*
/var*
/coverage*
/tmp*

# logs
*.log
*.logs

# version controll systems
.git
.svg
.hg

# node
node_modules
package-lock.json
EOF

    command -v prettier
    if [[ $? > 1 ]]; then
        npm install --global prettier
    fi
    npm install --save-dev prettier
}

gen_editorconfig() {
    cat <<EOF > .editorconfig
root = true
[*]
indent_style = space
indent_size = 2
end_of_line = lf
charset = utf-8
trim_trailing_whitespace = true
insert_final_newline = true
max_line_length = 80

[*.md]
trim_trailing_whitespace = false

[Makefile]
indent_style = tab
EOF
}

gen_eslint() {
    cat <<EOF > .eslintignore
/build*
/dist*
/var*
/coverage*
/tmp*

# logs
*.log
*.logs

# version controll systems
.git
.svg
.hg

# node
node_modules
package-lock.json
EOF

    cat <<EOF > .eslintrc.json
{
"env": {
"browser": true,
"node": true,
"es2022": true
},
"extends": [ "airbnb", "airbnb/hooks", "prettier" ],
"parserOptions": {
"ecmaVersion": "latest",
"sourceType": "module"
}
}
EOF

    command -v eslint
    if [[ $? > 1 ]]; then
        npm install --global eslint
    fi
    npm install --save-dev eslint \
        eslint-config-airbnb \
        eslint-config-prettier \
        eslint-plugin-jest
    npx install-peerdeps --dev eslint-config-airbnb
}

merge_package_json() {
    cat <<EOF > package.json.tmp
{
"name": "${PKG_NAME}",
"version": "${PKG_VERSION}",
"description": "${PKG_SUMMARY}",
"homepage": "${PKG_HOMEPAGE}",
"bugs": "${PKG_BUGREPORT}",
"keywords": ["${PKG_KEYWORDS}"],
"repository": {
"type": "git",
"url": "${PKG_REPO}.git"
},
"type": "module",
"browser": true,
"scripts": {
"dev": "make dev",
"build": "make build",
"test": "make test"
}
}
EOF
    jq -s '.[0] + {"dependencies": .[1].dependencies} + {"devDependencies": .[1].devDependencies}' package.json.tmp package.json > package.json.merged
    mv package.json.merged package.json
    rm package.json.tmp
}
gen_package_json() {
    cat package.json | jq ".name = \"${PKG_NAME}\"" |
        jq ".version = \"${PKG_VERSION}\"" |
        jq ". + {\"description\": \"${PKG_SUMMARY}\"}" |
        jq ". + {\"keywords\": [\"${PKG_KEYWORDS}\"]}" |
        jq '. + {"browser": true}' |
        jq ". + {\"homepage\": \"${PKG_HOMEPAGE}\"}" |
        jq ". + {\"bugs\": \"${PKG_BUGREPORT}\"}" |
        jq ". + {\"repository\": { \"type\": \"git\", \"url\": \"${PKG_REPO}.git\"}}"
}
init_vite() {
    npm create vite@latest . -- --template react
    npm install
}

get_pkg_name() {
    PKG_NAME="${1:-}"
    if [[ -z "${PKG_NAME:-}" ]]; then
        PKG_NAME=$(command $GEN_RANDOM_NAME)
    fi
}
get_pkg_srcdir() {
    PKG_ROOTDIR="${1:-}"
    if [[ -z "${PKG_ROOTDIR:-}" ]]; then
        PKG_ROOTDIR=${HOME}/tmp
    else
        PKG_ROOTDIR="$(realpath --canonicalize-missing "${1:-}")"
    fi
    PKG_BASENAME="${PKG_NAME}.crapp"
    PKG_SRCDIR="${PKG_ROOTDIR}/${PKG_BASENAME}"
    # File should not exist
    if [[ -d "${PKG_SRCDIR}" || -e "${PKG_SRCDIR}" ]]; then
         die "[${PKG_SRCDIR}] already exists!"
    fi
}

gen_pkg_meta() {
    gitusername=$(git config --global --get credential.username)
    if [[ -z "${gitusername:-}" ]]; then
        die "crapp needs -> git config --global --get credential.username"
    fi
    PKG_SUMMARY=${PKG_NAME}-summary
    PKG_DESCRIPTION=${PKG_NAME}-description
    PKG_KEYWORDS=${PKG_NAME}-keywords
    PKG_VERSION=0.0.1
    PKG_DISTNAME=${PKG_NAME}-${PKG_VERSION}
    PKG_REPO=https://github.com/${gitusername}/${PKG_NAME}
    PKG_HOMEPAGE=https://github.com/${gitusername}/${PKG_NAME}#readme
    PKG_BUGREPORT=${PKG_REPO}/issues
    PKG_DOCS=${PKG_REPO}#readme
    PKG_BUILDIR=${PKG_SRCDIR}/build
    PKG_DISTDIR=${PKG_SRCDIR}/dist
}

list_pkg_config() {
    echo $PKG_NAME
    echo $PKG_SUMMARY
    echo $PKG_DESCRIPTION
    echo $PKG_KEYWORDS
    echo $PKG_VERSION
    echo $PKG_DISTNAME
    echo $PKG_URL
    echo $PKG_BUGREPORT
    echo $PKG_DOCS
    echo $PKG_ROOTDIR
    echo $PKG_BASENAME
    echo $PKG_SRCDIR
    echo $PKG_BUILDIR
    echo $PKG_DISTDIR
}

parse_args() {
    declare -ga args=()
    while (($# > 0)); do
        case "${1:-}" in
            --debug)
                DEBUG=0
                ;;
            -h | --help)
                usage
                exit 0
                ;;
            -[a-zA-Z][a-zA-Z]*)
                local i ="${1:-}"
                shift
                for i in $(echo "$1" | grep -o '[a-zA-Z]'); do
                    set -- "-$i" "$@"
                done
                ;;
            --)
                shift
                args+=("$@")
                ;;
            -[a-zA-Z]* | --[a-zA-Z]*)
                die "Unrecognized argument ${1:-}"
                ;;
            *)
                args+=("${1:-}")
                ;;
        esac
        shift
    done
}

parse_param() {
    local param arg
    local -i toshift=0

    if (($# == 0)); then
        return $toshift
    elif [[ "$1" =~ .*=.* ]]; then
        param="${1%%=*}"
        arg="${1#*=}"
    elif [[ "${2-}" =~ ^[^-].+ ]]; then
        param="$1"
        arg="$2"
        ((toshift++))
    fi

    if [[ -z "${arg-}" && ! "${OPTIONAL-}" ]]; then
        die "${param:-$1} requires an argument"
    fi

    echo "${arg:-}"
    return $toshift
}

die() {
    exec 1>&2
    echo "$@"
    exit 1
}

main "$@"
