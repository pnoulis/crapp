* About
Crapp's intended goal is to ease the software devolpment process by producing a
directory tree formatted with tools that hopefully will standardize and drive a
simple development process.

Such an endeavor is extremely difficult. Why?
Because the development process itself is not standard. Each application and
organization producing an application have different development needs.

One person embarking on a personal project with the stated goal of installing
the program to his system for personal use would be content with the following
development process:

1. Write code
2. compile code
3. execute
4. repeat
5. when done install program at ~/bin
6. Add ~/bin to $PATH if not already there

One must keep in mind that the above devop is very high level and does
not address questions such as:

1. Which text editor is being used
2. How does one go debugging the program?
3. What about versioning?
4. What about dependencies?

TODO -> Give an example of a more complicated development process.

As such navigating across this overly-saturated environment one must discern
patterns out of the myriad of tools and methodologies..

* Command line arguments
** required arguments
Crapp requires a few input parameters in order to successfully run. If it is not
provided with those inputs then crapp throws an input validation error.

Some of the required inputs may be autogenerated if crapp is invoked with the
*--autogen* flag.

*--target* The Base template

*--preset* The Derived template

*--prefix* The installation root directory
   If no path is provided crapp will assume the 1st positional argument is the
   path. If the path or any of its components are missing then crapp throws an error.
   /autogenerated through the --autogen flag/

*--name* The application name
   /autogenerated through the --autogen flag/

*--version* The application version
   Will be validated for conformity against the semantic versioning scheme.
   /autogenerated through the --autogen flag/

*--summary* A short sentence describing the application
   /autogenerated through the --autogen flag/

** options
* Standard Application Environment Variables
package_name -> autogenerated using gname.sh
package_summary -> autogenerated using lorem
package_description -> autogenerated using lorem

package_bugreport
package_version
package_fullname -> derived
package_distname -> derived
* Glossary
** crapp_tag
rename to crapp_target
** crapp_type
rename to crapp_preset
** crapp_path
rename to crapp_prefix
crapp_path

** app_name
rename to target_name
** app_path
rename to target_prefix
** app_path
rename to target_path
target_summary
target_description
target_version

* crapp new
** create a directory at the location specified by the last positional argument
--name=project_name .

If a location to create the directory at has not been provided assume it is the current working directory.

If name has not been provided generate a random name.

Work should be carried out in a temporary location so as to not dirty the filesystem with unnecessary files
in case the process fails.





* Node template
** Crapp should create its own package archive which will have significant benefits
*** benefits
1. Scaffolding a project will take significantly less time. Which will increase
   overall usage of the program.
2. No need for an internet connection, dependencies are stored locally.
3. Protection against upstream eventualities, like servers being down, etc.
*** How
**** Saving packages locally
download a package globally
use npm to locate the package
use npm to locate the package dependencies
move package and dependencies over to the template
**** use npm to locate a package
npm ls package@semantic-version-specifier
**** linter
**** formatter
**** bundler
**** Install a package and all of its dependencies nested (--install-strategy=nested)
*** Issues
**** using npm dedupe to provide a clean node_modules
* Moving and testing each subcommand
** Chenge the subcommand dir prefix
** List templates
** Debug templates
** Dry run templates
** Generate
** templates should be a positional argument not a parameter
** move and test subcommand checklist
*** change the dir prefix
*** assign a default value of base for the template target
*** assign a default filename for those templates that produce files
*** remove unnecessary code defined by crapp.sh
*** list templates
*** debug templates
*** dry run templates
*** generate
** DONE move and test dirs
CLOSED: [2023-08-10 Thu 11:37]
*** DONE change the dir prefix
CLOSED: [2023-08-10 Thu 09:17]
*** DONE assign a default value of base for the template target
CLOSED: [2023-08-10 Thu 11:31]
*** assign a default filename for those templates that produce files
*** DONE remove unnecessary code defined by crapp.sh
CLOSED: [2023-08-10 Thu 11:31]
*** DONE list templates
CLOSED: [2023-08-10 Thu 11:31]
*** DONE debug templates
CLOSED: [2023-08-10 Thu 11:32]
*** DONE dry run templates
CLOSED: [2023-08-10 Thu 11:37]
*** DONE generate
CLOSED: [2023-08-10 Thu 11:37]


** DONE move and test makefile
CLOSED: [2023-08-12 Sat 21:22]
*** DONE change the dir prefix
CLOSED: [2023-08-10 Thu 12:14]
*** DONE assign a default value of base for the template target
CLOSED: [2023-08-10 Thu 12:14]
*** DONE assign a default filename for those templates that produce files
CLOSED: [2023-08-10 Thu 12:13]
*** DONE remove unnecessary code defined by crapp.sh
CLOSED: [2023-08-10 Thu 12:13]
*** DONE list templates
CLOSED: [2023-08-10 Thu 12:13]
*** DONE debug templates
CLOSED: [2023-08-10 Thu 12:13]
*** DONE dry run templates
CLOSED: [2023-08-10 Thu 12:14]
*** DONE generate
CLOSED: [2023-08-10 Thu 12:14]

** DONE move and test pkg checklist
CLOSED: [2023-08-10 Thu 13:41]
*** DONE change the dir prefix
CLOSED: [2023-08-10 Thu 13:41]
*** DONE assign a default value of base for the template target
CLOSED: [2023-08-10 Thu 13:41]
*** DONE assign a default filename for those templates that produce files
CLOSED: [2023-08-10 Thu 13:41]
*** DONE remove unnecessary code defined by crapp.sh
CLOSED: [2023-08-10 Thu 13:41]
*** DONE list templates
CLOSED: [2023-08-10 Thu 13:41]
*** DONE debug templates
CLOSED: [2023-08-10 Thu 13:41]
*** DONE dry run templates
CLOSED: [2023-08-10 Thu 13:41]
*** DONE generate
CLOSED: [2023-08-10 Thu 13:41]
** DONE move and test bash checklist
CLOSED: [2023-08-10 Thu 13:37]
*** DONE change the dir prefix
CLOSED: [2023-08-10 Thu 13:34]
*** DONE assign a default value of base for the template target
CLOSED: [2023-08-10 Thu 13:34]
*** DONE assign a default filename for those templates that produce files
CLOSED: [2023-08-10 Thu 13:34]
*** DONE remove unnecessary code defined by crapp.sh
CLOSED: [2023-08-10 Thu 13:34]
*** DONE list templates
CLOSED: [2023-08-10 Thu 13:34]
*** DONE debug templates
CLOSED: [2023-08-10 Thu 13:36]
*** DONE dry run templates
CLOSED: [2023-08-10 Thu 13:37]
*** DONE generate
CLOSED: [2023-08-10 Thu 13:37]

** DONE move and test app  checklist
CLOSED: [2023-08-12 Sat 21:05]
*** change the dir prefix
*** assign a default value of base for the template target
*** assign a default filename for those templates that produce files
*** remove unnecessary code defined by crapp.sh
*** list templates
*** debug templates
*** dry run templates
*** generate

* Filename parsing
* Installation variables
* test the dirs template

** Test 1
The dirs template output should be moved to the path specified by the last
positional parameter to the template.


* Some templates create files
* Some templates create directory hierarchies
